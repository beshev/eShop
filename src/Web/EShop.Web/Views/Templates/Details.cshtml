@model TemplateDetailsModel
@inject IHtmlSanitizer sanitizer

@{
    var productName = $"{this.Model.Name} за {this.Model.Category.Name}";
    var isItemSuccessfullyAdded = this.TempData[GlobalConstants.SuccessKey] is not null;
}

@if (isItemSuccessfullyAdded)
{
    <div class="col-12 col-sm-12 col-md-12 col-lg-4 offset-lg-7">
        <div class="alert alert-dismissible alert-danger">
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            Успешно добавихте този продукт в количката.
        </div>
    </div>
}

<div class="col-lg-6">
    <div class="card mb-4 p-1 cardHoverDetails">
        <svg class="card-img-top" xmlns="http://www.w3.org/2000/svg" width="100%" height="100%" aria-label="Placeholder: Image cap" focusable="false" role="img" preserveAspectRatio="xMidYMid slice" viewBox="0 0 318 180" style="font-size:1.125rem;text-anchor:middle">
            <rect width="100%" height="100%" fill="#FFFFFF"></rect>
            <image href="@this.Model.ImageUrl" height="100%" width="100%"></image>
        </svg>
        <div class="card-body">
            <div class="small text-muted">@this.Model.Name</div>
            <h2 class="card-title">@((this.Model.Price + this.Model.Category.Price).ToString("F2")) лв</h2>
            <p class="card-text details-desc-size">
                @(Html.Raw(sanitizer.Sanitize(this.Model.Description)))
            </p>
        </div>
    </div>
</div>

<vc:order-item
    template-id="@Model.Id"
    product-id="@null"
    price="@this.Model.Price" 
    product-name="@productName" 
    has-custom-text="@this.Model.HasCustomText" 
    images-count="@this.Model.ImagesCount"
    product-image-url="@this.Model.ImageUrl"
    return-url="@this.ViewData[GlobalConstants.ReturnUrlKey]">
</vc:order-item>

@section Scripts{
    <script src="~/js/image-modal.js"></script>
}

@section Css{
    <link rel="stylesheet" href="~/css/galeryCss.css" />
}